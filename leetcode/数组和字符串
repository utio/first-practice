//寻找数组中心索引，索引数左右数组元素和相同，没有返回-1
//从左开始求和，和的2背加上索引数字为总和
class Solution {
    public int pivotIndex(int[] nums) {
        int totle = 0; int index=0;
        int sum=0;
        for(int i=0; i<nums.length; i++){
            totle += nums[i];
        }
        for(int i=0; i<nums.length; i++){
            
            if(sum*2+nums[i] == totle){return i;}
            sum += nums[i];
        }
        return -1;
    }
}
//给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置
//使用二分法查找，中间值的寻找方法用了整数除法的特殊性质
class Solution {
    public int searchInsert(int[] nums, int target) {
        //二分法查找
        int left = 0;
        int right = nums.length-1;
        while(left<=right){
            int mid = left + (right-left)/2;  //找中间数
            if(target<nums[mid]){
                right = mid-1;
            }else if(target>nums[mid]){
                left = mid+1;
            }else{return mid;}
        }
        return left;
    }
}
//把几个区间做包含运算，最后得到不重合的区间
public static void main(String[] args){
       // int[][] array ={{1,3},{2,6},{8,10},{15,18}};
        int[][] array ={{1,4},{0,4}};
        Arrays.sort(array, (a, b) -> Integer.compare(a[0], b[0]));  //这是一个Lambda表达式，用来比较array的第一个元素的大小
        List<int[]> arrayList = new ArrayList<>();   //建立一个新的列表，用来储存区间
        for(int i=0; i<array.length; ++i){
            int L = array[i][0]; int R = array[i][1];
            //获取list最后一个元素和原来的数组的左侧元素进行比较，小了直接添加进列表，大了比较右侧元素大小，即用排序后的数组的前一个的右区间和后一个左区间比较
            if(arrayList.size()==0 || arrayList.get(arrayList.size()-1)[1] < L){
                arrayList.add(new int[]{L,R});
            }else{
                arrayList.get(arrayList.size()-1)[1] = Math.max(arrayList.get(arrayList.size()-1)[1],R); //合并两个区间
            }
        }
        array = arrayList.toArray(new int[arrayList.size()][]);  //将列表转化成列表长度的整数数组
    }
//将数组顺时针旋转，顺时针旋转先变对角元素，后再进行列变换
public static void main(String[] args){
        int[][] array = new int[][]{
                {1,2,3,4},
                {2,5,7,6},
                {0,2,1,8},
                {12,3,45,6}
        };
        //对角元素转置,转置完正好是需要矩阵的反方向排列
        for(int i=0; i<array.length; i++){
            for(int j=i+1; j<array[i].length; j++){
                int temp = array[i][j];
                array[i][j] = array[j][i];
                array[j][i] = temp;
            }
        }
        //列变化
        int L=0,R=array.length-1;
        while(L <= R){
            for(int j=0; j<array.length; j++){
                int temp = array[j][L];
                array[j][L] = array[j][R];
                array[j][R] = temp ;
            }
            L++; R--;
        }
        outPutTwo(array);
    }

//寻找数组中心索引，索引数左右数组元素和相同，没有返回-1
//从左开始求和，和的2背加上索引数字为总和
class Solution {
    public int pivotIndex(int[] nums) {
        int totle = 0; int index=0;
        int sum=0;
        for(int i=0; i<nums.length; i++){
            totle += nums[i];
        }
        for(int i=0; i<nums.length; i++){
            
            if(sum*2+nums[i] == totle){return i;}
            sum += nums[i];
        }
        return -1;
    }
}
//给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置
//使用二分法查找，中间值的寻找方法用了整数除法的特殊性质
class Solution {
    public int searchInsert(int[] nums, int target) {
        //二分法查找
        int left = 0;
        int right = nums.length-1;
        while(left<=right){
            int mid = left + (right-left)/2;  //找中间数
            if(target<nums[mid]){
                right = mid-1;
            }else if(target>nums[mid]){
                left = mid+1;
            }else{return mid;}
        }
        return left;
    }
}
